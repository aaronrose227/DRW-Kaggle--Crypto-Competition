{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":96164,"databundleVersionId":12993472,"sourceType":"competition"},{"sourceId":249869065,"sourceType":"kernelVersion"}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    print(dirname, filenames)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-19T13:38:47.530570Z","iopub.execute_input":"2025-07-19T13:38:47.530848Z","iopub.status.idle":"2025-07-19T13:38:47.553419Z","shell.execute_reply.started":"2025-07-19T13:38:47.530825Z","shell.execute_reply":"2025-07-19T13:38:47.552686Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/the-order-of-the-test-rows-2/__results__.html\n/kaggle/input/the-order-of-the-test-rows-2/__notebook__.ipynb\n/kaggle/input/the-order-of-the-test-rows-2/closest_rows.csv\n/kaggle/input/the-order-of-the-test-rows-2/__output__.json\n/kaggle/input/the-order-of-the-test-rows-2/custom.css\n/kaggle/input/the-order-of-the-test-rows-2/__results___files/__results___12_1.png\n/kaggle/input/the-order-of-the-test-rows-2/__results___files/__results___5_1.png\n/kaggle/input/the-order-of-the-test-rows-2/__results___files/__results___11_1.png\n/kaggle/input/drw-crypto-market-prediction/sample_submission.csv\n/kaggle/input/drw-crypto-market-prediction/train.parquet\n/kaggle/input/drw-crypto-market-prediction/test.parquet\n/kaggle/input []\n/kaggle/input/the-order-of-the-test-rows-2 ['__results__.html', '__notebook__.ipynb', 'closest_rows.csv', '__output__.json', 'custom.css']\n/kaggle/input/the-order-of-the-test-rows-2/__results___files ['__results___12_1.png', '__results___5_1.png', '__results___11_1.png']\n/kaggle/input/drw-crypto-market-prediction ['sample_submission.csv', 'train.parquet', 'test.parquet']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import numpy as np, pandas as pd, gc, os, warnings\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.model_selection import TimeSeriesSplit\nimport xgboost as xgb\n\nwarnings.filterwarnings('ignore')\n\n# Helper: Memory optimization\ndef optimize_mem(df):\n    for col in df.select_dtypes(include=['int64','float64']).columns:\n        if pd.api.types.is_integer_dtype(df[col]):\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    return df\n\n# Timestamp reconstruction (if file exists)\nrecon_path = '/kaggle/input/the-order-of-the-test-rows-2/closest_rows.csv'\nuse_recon = os.path.exists(recon_path)\nif use_recon:\n    print('Timestamp reconstruction: ENABLED')\n    recon = pd.read_csv(recon_path)['0'].values\nelse:\n    print('Timestamp reconstruction: DISABLED')\n\n# Features to use (a mix of public and proven features)\nfeature_list = [\n    'bid_qty', 'ask_qty', 'buy_qty', 'sell_qty', 'volume',\n    # Some proven proprietary features, adjust as needed for your data\n    'X363','X405','X321','X175','X179','X137','X197','X22','X40','X181',\n    'X28','X169','X198','X173','X338','X288','X385','X344','X427','X587',\n    'X450','X97','X52','X444','X598','X379','X696','X297','X138','X572',\n    'X343','X586','X466','X438','X452','X459','X435','X386','X55','X341',\n    'X683','X428','X605','X445','X272','X180','X593','X680','X686','X692',\n    'X695',\"X603\",\"X674\",\"X421\",\"X333\",\"X415\",\"X345\",\"X174\",\"X302\",\"X178\",\n    \"X168\",\"X612\",\"X298\",\"X45\",\"X46\",\"X39\",\"X752\",\"X759\",\"X41\",\"X42\"\n]\nfeature_list = list(dict.fromkeys(feature_list))  # remove duplicates\n\n# Rolling/lagged feature generator\ndef create_rolling_lagged(df, cols):\n    # rolling means/stds (window=5, 10, 20)\n    for col in cols[:10]:\n        df[f'{col}_roll5'] = df[col].rolling(5, min_periods=1).mean().astype('float32')\n        df[f'{col}_roll10'] = df[col].rolling(10, min_periods=1).mean().astype('float32')\n        df[f'{col}_roll20'] = df[col].rolling(20, min_periods=1).mean().astype('float32')\n        df[f'{col}_std5'] = df[col].rolling(5, min_periods=1).std().fillna(0).astype('float32')\n    # simple lags/leads (works best after test is reordered)\n    for lag in [1, 2, 5, 10, 20]:\n        for col in cols[:10]:\n            df[f'{col}_lag{lag}'] = df[col].shift(lag).fillna(0).astype('float32')\n            df[f'{col}_lead{lag}'] = df[col].shift(-lag).fillna(0).astype('float32')\n    return df\n\n# 1. Load and process training data\ntrain = pd.read_parquet('/kaggle/input/drw-crypto-market-prediction/train.parquet')\ntrain = optimize_mem(train)\nfeatures = [f for f in feature_list if f in train.columns]\nX_train = train[features].fillna(0).copy()\nX_train = create_rolling_lagged(X_train, features)\ny_train = train['label'].astype('float32').values\ndel train; gc.collect()\n\n# 2. Setup and cross-validate ensemble\ntscv = TimeSeriesSplit(n_splits=3)\nmodels = {\n    'ridge': Ridge(alpha=1.0),\n    'xgb': xgb.XGBRegressor(\n        n_estimators=150, max_depth=5, learning_rate=0.08, \n        subsample=0.7, colsample_bytree=0.7, n_jobs=-1, tree_method='hist', random_state=42\n    )\n}\n# Only include models with mean corr >0.005 in CV\nvalid_models = {}\nfor name, model in models.items():\n    corrs = []\n    for tr_idx, val_idx in tscv.split(X_train):\n        model.fit(X_train.iloc[tr_idx], y_train[tr_idx])\n        p = model.predict(X_train.iloc[val_idx])\n        corrs.append(np.corrcoef(y_train[val_idx], p)[0,1])\n    m = np.mean(corrs)\n    print(f'{name} mean CV corr: {m:.4f}')\n    if m > 0.005:\n        valid_models[name] = model\n\nif len(valid_models) > 1:\n    final = VotingRegressor(list(valid_models.items()))\nelse:\n    final = list(valid_models.values())[0]\nfinal.fit(X_train, y_train)\n\ndel X_train, y_train\ngc.collect()\n\n# 3. Load and process test data (with timestamp reconstruction if available)\ntest = pd.read_parquet('/kaggle/input/drw-crypto-market-prediction/test.parquet')\ntest = optimize_mem(test)\nif use_recon:\n    test = test.iloc[recon]\n    test = test.reset_index(drop=True)\nfeatures_test = [f for f in feature_list if f in test.columns]\nX_test = test[features_test].fillna(0).copy()\nX_test = create_rolling_lagged(X_test, features_test)\ndel test; gc.collect()\n\n# 4. Predict and submit\npreds = final.predict(X_test)\nsub = pd.read_csv('/kaggle/input/drw-crypto-market-prediction/sample_submission.csv')\nif use_recon:\n    # Return to original test order\n    sub['prediction'] = pd.Series(preds, index=np.arange(len(preds))).sort_index().values\nelse:\n    sub['prediction'] = preds\nsub.to_csv('/kaggle/working/submission.csv', index=False)\nprint('Submission Ready: submission.csv')\nprint(sub.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-19T13:38:47.554652Z","iopub.execute_input":"2025-07-19T13:38:47.554865Z","iopub.status.idle":"2025-07-19T13:40:50.264416Z","shell.execute_reply.started":"2025-07-19T13:38:47.554849Z","shell.execute_reply":"2025-07-19T13:40:50.263686Z"}},"outputs":[{"name":"stdout","text":"Timestamp reconstruction: ENABLED\nridge mean CV corr: 0.5407\nxgb mean CV corr: 0.3112\nSubmission Ready: submission.csv\n   ID  prediction\n0   1    1.104830\n1   2    2.466272\n2   3   -2.815214\n3   4   -1.725761\n4   5    6.031542\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"print(\"Files in /kaggle/working:\", os.listdir('/kaggle/working'))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-19T13:40:50.265357Z","iopub.execute_input":"2025-07-19T13:40:50.265639Z","iopub.status.idle":"2025-07-19T13:40:50.270465Z","shell.execute_reply.started":"2025-07-19T13:40:50.265613Z","shell.execute_reply":"2025-07-19T13:40:50.269795Z"}},"outputs":[{"name":"stdout","text":"Files in /kaggle/working: ['submission.csv', '.virtual_documents']\n","output_type":"stream"}],"execution_count":6}]}